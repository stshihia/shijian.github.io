<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王石坚的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-30T06:11:06.011Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王石坚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>给亲爱的一封信</title>
    <link href="http://yoursite.com/2018/12/30/to-my-lvoe/"/>
    <id>http://yoursite.com/2018/12/30/to-my-lvoe/</id>
    <published>2018-12-30T06:02:15.000Z</published>
    <updated>2018-12-30T06:11:06.011Z</updated>
    
    <content type="html"><![CDATA[<p>在博客上给亲爱的写情书，没有别人看，只有你在看，其实也是挺幸福的一件事情。</p><a id="more"></a><p>又是情书，又是博客，如何将这二者结合，这便成了问题。本文旨在分享我和亲爱的的爱情中有关计算机的部分，技术层面很粗糙，是个总结，也指明今年的发展方向。</p><h1 id="解决电脑问题表达爱"><a href="#解决电脑问题表达爱" class="headerlink" title="解决电脑问题表达爱"></a>解决电脑问题表达爱</h1><p>普通的活动认识，但是由于是计算机学院的人，电脑出了问题得找到我头上。我和亲爱的认识，肯定不是因为重装系统，但是和各种电脑问题分不开。</p><h2 id="激活系统"><a href="#激活系统" class="headerlink" title="激活系统"></a>激活系统</h2><p>激活系统在网络上有很多的下载，但是由于涉及版权，自然没有大厂能提供软件下载链接。这便开始考验我的搜索能力和分辨网络上良莠不齐的资源的能力。百度搜素<code>小马激活</code>即可，不排除风险，但是对于我们普通用户能够满足需求。</p><p>当初正是凭借着一个激活软件，稳稳地树立了在亲爱的心目中<strong>计算机学院学长</strong>的形象。</p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>那么常用软件的靠谱安装包一定要备份一下，如果能够稳定提供下载的软件那么不必备份。但是安装完成后，不必安装太全，因为确实也装不全。这时，主动沟通，你需要什么软件，这才是正确的方法。</p><p>当初就是靠着一个PS安装包，坐稳了在亲爱的心中的<strong>靠谱学长</strong>形象。哈哈！</p><h2 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h2><p>在激活系统事件之后，我便意识到，不会点这些技术完全不能行走江湖。不能行走江湖我无所谓，但是形象毁了那可就严重了。重装系统由于其操作炫酷，解决问题实际，看起来工作量大，是必备的技术。所以，我各种研究，还忍痛把自己的笔记本正版系统抹掉，学习了重装系统。果然，后面不仅帮亲爱的重装过系统，还帮亲爱的的同学装过，亲爱的的姐夫装过。。。坐稳了亲爱的心目中<strong>修电脑高科技人才</strong>的形象甚至到了公司，还是装过。网上的教程很多，两点自己的个人经验。</p><ol><li><p>系统镜像下载</p><p>官方下载慢的坑爹，站点 <a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener"><code>itellyou</code></a>获得大家一致好评。</p></li><li><p>安装U盘制作</p><p>不要使用大白菜、老毛桃，<a href="https://cn.ultraiso.net/xiazai.html" target="_blank" rel="noopener">软碟通</a>是最佳的选择。</p></li><li><p>数据备份</p><p>安装之前一定告知用户C盘将被格式化备份数据，否则好心办坏了事就惨啦。</p></li></ol><h1 id="print方法表达爱"><a href="#print方法表达爱" class="headerlink" title="print方法表达爱"></a>print方法表达爱</h1><p>解决具体问题能够让生活顺畅，但是不还得浪漫嘛。此时可以使用常见的打印方法来展示理工科男生的浪漫。打印其实程序调试的方法，但是简单粗暴，且给人极客的感觉。当初就是凭借这些技能，坐稳了在亲爱的心目中<strong>编程大神</strong>的形象，侧面也显示我这个人不傻，以后是很浪漫的。</p><h2 id="Excel-画心形线"><a href="#Excel-画心形线" class="headerlink" title="Excel 画心形线"></a>Excel 画心形线</h2><p><code>Excel</code>在基本上都有，所以不存在运行环境的问题。但是缺点就是极客范要少一点。网上的教程简直不要太多。略加搜索，制作完成后，拷贝发送即可。现在再搜搜，大家都已经进化啦，心形线画的更加好看。我当初的Excel还是被亲爱的保存的好好的，也是一份当初的美好。</p><h2 id="编程语言画心形线"><a href="#编程语言画心形线" class="headerlink" title="编程语言画心形线"></a>编程语言画心形线</h2><p><code>Excel</code>由于是常见的软件，所以你再画的再漂亮，别人也不觉得很厉害。所以，通过学习C语言，在控制台打印心形线，黑框框就是黑客的象征。网上找段程序员炫技的打印代码，调试运行，展示给亲爱的看，此时还是得表现出这都是低级技术的样子，才能坐稳亲爱的头一把交椅。来段代码吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">float</span> y=<span class="number">1.5f</span>; y&gt;<span class="number">-1.5f</span>; y-=<span class="number">0.1f</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">float</span> x=<span class="number">-1.5f</span>; x&lt;<span class="number">1.5f</span>; x+=<span class="number">0.05f</span>)&#123;</span><br><span class="line">            <span class="keyword">float</span> a=x*x+y*y<span class="number">-1</span>;</span><br><span class="line">            <span class="built_in">putchar</span>(a*a*a-x*x*y*y*y&lt;=<span class="number">0.0f</span>?<span class="string">'*'</span>:<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单片机"><a href="#单片机" class="headerlink" title="单片机"></a>单片机</h2><p>学自动化，玩了几天开发板。当时亲爱的说别的学院的同学能够让显示屏显示字，我当时就怒了，这有什么了不起。但是开发板不在，赶紧把<code>Proteus</code>调出来，分分钟在模拟软件上使用51单片机与1602显示屏打印了一个<code>woaiyimeiduo</code>，当场就把亲爱的给感动坏了。我也当时牛逼坏了。哈哈~充分说明大家学习东西，一定要活学活用，只要青春脑子灵，不断加深好感情。</p><h1 id="软件表达爱"><a href="#软件表达爱" class="headerlink" title="软件表达爱"></a>软件表达爱</h1><p>在随后的日子里，随着我技术的提升，渐渐脱离了<code>print</code>的低级趣味，同时遇见了<code>Python</code>，简直就是打开了新世界的大门。我尝试了画词云图，微信发送消息催起床，帮忙处理<code>Excel</code>数据等。但，我个人觉得这些都没有脱离前面的方法表达爱，没有脱离低级趣味。而且，亲爱的也提升了自己，对我这些雕虫小技已经开始不屑一顾了。我的光辉形象已经不太稳，吹牛骗不了她了。今天特此写这篇博客，要开发一个Web站点，在上面用漂亮的页面记录和亲爱的感情。站点短期肯定是搞不定啦，不还是要上班和陪亲爱的耍嘛。这篇博客能够在公网上访问，所以，也算数啦。今年加油学好Web技术，就能改善这个尴尬的局面，让亲爱的满意。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇博客写于胖胖的生日前夕，用来纪念我们的爱情。作为一个程序员，以最真挚的方式来表达对胖胖的爱。胖胖肯定特别感动。嘿嘿，喵喵！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在博客上给亲爱的写情书，没有别人看，只有你在看，其实也是挺幸福的一件事情。&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="love" scheme="http://yoursite.com/tags/love/"/>
    
  </entry>
  
  <entry>
    <title>Python进阶</title>
    <link href="http://yoursite.com/2018/10/31/Python%E8%BF%9B%E9%98%B6%E4%B8%80/"/>
    <id>http://yoursite.com/2018/10/31/Python进阶一/</id>
    <published>2018-10-31T14:52:19.000Z</published>
    <updated>2018-10-31T15:11:02.914Z</updated>
    
    <content type="html"><![CDATA[<p>在熟悉了python的基本语法后，通过不断地实践，越发地爱上了这门语言。需要深入地理解和用好它。<br><a id="more"></a><br>在学习<a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP 8</a>相关文档过程中，获得了一份很好的<a href="http://safehammad.com/downloads/python-idioms-2014-01-16.pdf" target="_blank" rel="noopener">文档</a>，里面介绍了几个tips，值得python新手进阶的时候学习。</p><h2 id="What’s-an-Idiom"><a href="#What’s-an-Idiom" class="headerlink" title="What’s an Idiom"></a>What’s an Idiom</h2><p>Idioms我觉得在这里叫惯用语最合适，指的是使用python的过程中符合python哲学的“正确”做法。通俗一点可以叫套路，高雅一点可以叫范式。相比错误的做法，采用这些idioms，有以下好处。</p><ol><li>可读性高</li><li>执行效率高</li><li>内存占用少</li></ol><h2 id="让程序可执行亦可引入"><a href="#让程序可执行亦可引入" class="headerlink" title="让程序可执行亦可引入"></a>让程序可执行亦可引入</h2><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br></pre></td></tr></table></figure></p><p>这句代码让该脚本能够在cmd中python xxx.py执行，也可以作为一个 module 被别的代码进行import。</p><h2 id="正确地判断布尔值"><a href="#正确地判断布尔值" class="headerlink" title="正确地判断布尔值"></a>正确地判断布尔值</h2><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if x:</span><br><span class="line">if not x:</span><br></pre></td></tr></table></figure></p><p>不要像C语言那样各种判断，python的数据类型都进行了封装。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># GOOD</span><br><span class="line">name = &apos;Safe&apos;</span><br><span class="line">pets = [&apos;Dog&apos;, &apos;Cat&apos;, &apos;Hamster&apos;]</span><br><span class="line">owners = &#123;&apos;Safe&apos;: &apos;Cat&apos;, &apos;George&apos;: &apos;Dog&apos;&#125; </span><br><span class="line">if name and pets and owers:</span><br><span class="line">    print(&quot;we have pets&quot;)</span><br><span class="line">    </span><br><span class="line"># NOT SO GOOD</span><br><span class="line">if name != &apos;&apos; and len(pets) &gt; 0 and owers != &#123;&#125;:</span><br><span class="line">    print(&quot;we have pets&quot;)</span><br></pre></td></tr></table></figure></p><p>不必在判断非空这件事情上浪费代码。</p><h2 id="使用-in"><a href="#使用-in" class="headerlink" title="使用 in"></a>使用 in</h2><p>代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># container</span><br><span class="line">if item in items:</span><br><span class="line"># iteration</span><br><span class="line">for item in items:</span><br></pre></td></tr></table></figure></p><p>分别举例说明一下。</p><h3 id="a-容器"><a href="#a-容器" class="headerlink" title="a. 容器"></a>a. 容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># GOOD</span><br><span class="line">name = &apos;Safe Hammad&apos;</span><br><span class="line">if &apos;H&apos; in name:</span><br><span class="line">    print(&quot;ok&quot;)</span><br><span class="line"></span><br><span class="line"># NOT SO GOOD</span><br><span class="line">if name.find(&apos;H&apos;)! = -1:</span><br><span class="line">    print(&quot;ok&quot;)</span><br></pre></td></tr></table></figure><p>这样的写法，阅读很清晰。能够在内置的数据类型中使用（包括列表，字典，集合，字符串）。封装的类，如果实现了<strong>contains</strong> 方法，也可以实现。</p><h3 id="b-迭代器"><a href="#b-迭代器" class="headerlink" title="b. 迭代器"></a>b. 迭代器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># GOOD</span><br><span class="line">pets = [&apos;Dog&apos;, &apos;Cat&apos;, &apos;Hamster&apos;]</span><br><span class="line">for pet in pets</span><br><span class="line">    print(pet)</span><br><span class="line"></span><br><span class="line"># NOT SO GOOD</span><br><span class="line">i = 0</span><br><span class="line">while i &lt; len(pets):</span><br><span class="line">    print(&apos;A&apos;, pets[i], &apos;can be very cute!&apos;)</span><br><span class="line">    i += 1</span><br></pre></td></tr></table></figure><p>这样的写法,代码更加简洁。同样在内置的数据类型中使用。封装的类，如果实现了<strong>iter</strong> 方法，也可以实现。这极大地简化了for循环的语句。</p><h2 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h2><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure></p><p>不必再像C语言使用temp变量进行交换，减少代码。</p><h2 id="使用序列生成字符串"><a href="#使用序列生成字符串" class="headerlink" title="使用序列生成字符串"></a>使用序列生成字符串</h2><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;.join(some_strings)</span><br></pre></td></tr></table></figure></p><p>相比使用+拼接字符串，时间复杂度更低。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># GOOD</span><br><span class="line">chars = [&apos;S&apos;, &apos;a&apos;, &apos;f&apos;, &apos;e&apos;]</span><br><span class="line">name = &apos;&apos;.join(chars)</span><br><span class="line">print(name)</span><br><span class="line"></span><br><span class="line"># NOT SO GOOD</span><br><span class="line">chars = [&apos;S&apos;, &apos;a&apos;, &apos;f&apos;, &apos;e&apos;]</span><br><span class="line">name = &apos;&apos;</span><br><span class="line">for char in chars:</span><br><span class="line">    name += char</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure></p><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">except:</span><br></pre></td></tr></table></figure></p><p>这里有个概念，鸭子类型（duck typing）。它指的是，如果一个对象，走路像鸭子，叫声像鸭子，那么它一定是鸭子。这是面向对象中的多态（polymorphism）的理论。使用异常而不是使用if来进行各种判断检查，将把我们通过写代码排除各种特殊情况中解放出来。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># GOOD</span><br><span class="line">d = &#123;&apos;x&apos;: &apos;5&apos;&#125;</span><br><span class="line">try:</span><br><span class="line">    value = int(d[&apos;x&apos;])</span><br><span class="line">except (KeyError, TypeError, ValueError):</span><br><span class="line">    value = None</span><br><span class="line"># NOT SO GOOD</span><br><span class="line">if &apos;x&apos; in d and \</span><br><span class="line">    isinstance(d[&apos;x&apos;], str) and \</span><br><span class="line">    d[&apos;x&apos;].isdigit():</span><br><span class="line">    value = int(d[&apos;x&apos;])</span><br><span class="line">else:</span><br><span class="line">    value = None</span><br></pre></td></tr></table></figure></p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i, item in enumerate(items):</span><br></pre></td></tr></table></figure></p><p>当既需要遍历容器内的元素，又需要容器内元素的下标时，这个方法便派上用场了。</p><h2 id="表达式来构建列表"><a href="#表达式来构建列表" class="headerlink" title="表达式来构建列表"></a>表达式来构建列表</h2><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i * 3 for i in data if i &gt; 10]</span><br></pre></td></tr></table></figure></p><p>对于一些比较简单的变换，这种方法非常简洁。如果太复杂，还是使用常规的for+if的语句。我认为判断的依据在于该语句是否太长而影响可读性。</p><h2 id="zip创建字典"><a href="#zip创建字典" class="headerlink" title="zip创建字典"></a>zip创建字典</h2><p>代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = dict(zip(keys, values))</span><br></pre></td></tr></table></figure></p><p>代码简洁，避免使用循环进行创建。</p><h2 id="使用-接收无用变量"><a href="#使用-接收无用变量" class="headerlink" title="使用 _ 接收无用变量"></a>使用 _ 接收无用变量</h2><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for k, _ in [(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)]</span><br></pre></td></tr></table></figure></p><p>对于元组中的数值我们不需要，那么使用下划线来接收。如果是以下形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for k, j in [(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)]</span><br></pre></td></tr></table></figure></p><p>难免阅读者会去考虑变量j的用途，影响可读性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些idioms很有帮助。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line"></span><br><span class="line">if x:</span><br><span class="line">if not x:</span><br><span class="line"></span><br><span class="line"># container</span><br><span class="line">if item in items:</span><br><span class="line"># iteration</span><br><span class="line">for item in items:</span><br><span class="line"></span><br><span class="line">a, b = b, a</span><br><span class="line"></span><br><span class="line">for k, _ in [(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)]</span><br></pre></td></tr></table></figure><p>这些我现在已经深刻理解，成为我的python代码风格一部分，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;.join(some_strings)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">except:</span><br><span class="line"></span><br><span class="line">d = dict(zip(keys, values))</span><br><span class="line"></span><br><span class="line">for i, item in enumerate(items):</span><br><span class="line"></span><br><span class="line">[i * 3 for i in data if i &gt; 10]</span><br></pre></td></tr></table></figure><p>这些我还需要继续熟悉之中。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://safehammad.com/downloads/python-idioms-2014-01-16.pdf" target="_blank" rel="noopener">http://safehammad.com/downloads/python-idioms-2014-01-16.pdf</a></li><li><a href="https://docs.python.org/3.1/howto/doanddont.html" target="_blank" rel="noopener">https://docs.python.org/3.1/howto/doanddont.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在熟悉了python的基本语法后，通过不断地实践，越发地爱上了这门语言。需要深入地理解和用好它。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="http://yoursite.com/categories/tech/"/>
    
    
      <category term="python coding rule" scheme="http://yoursite.com/tags/python-coding-rule/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记</title>
    <link href="http://yoursite.com/2018/10/21/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/10/21/git学习笔记/</id>
    <published>2018-10-20T20:00:49.000Z</published>
    <updated>2018-10-21T04:15:04.837Z</updated>
    
    <content type="html"><![CDATA[<p>git是版本控制工具，程序员必备技能。以前在学校的时候自己跟着教程学习过，现在在工作中已经用了一段时间了。在此进行总结和复习。<br><a id="more"></a></p><h1 id="git的初始化操作"><a href="#git的初始化操作" class="headerlink" title="git的初始化操作"></a>git的初始化操作</h1><p>我通过一系列的命令对操作进行复习和解释。</p><ul><li><p>安装git后，需要指定用户名和邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;s********a&quot;</span><br><span class="line">$ git config --global user.email &quot;3**********.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>git init会初始化一个本次仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir git_test</span><br><span class="line">cd git_test</span><br><span class="line">git init</span><br></pre></td></tr></table></figure></li></ul><h1 id="git-提交文件"><a href="#git-提交文件" class="headerlink" title="git 提交文件"></a>git 提交文件</h1><ul><li>git add 添加文件</li><li><p>git commit 将文件提交至版本库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch readme.txt</span><br><span class="line">git add readme.txt</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure></li><li><p>git log 查看多次提交的版本文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sssdembp:git_test sss$ git log</span><br><span class="line">commit 81e27beccb5576f2e02f90ad2c373d8a7341268e (HEAD -&gt; master)</span><br><span class="line">Author: stshihia &lt;379187038@qq.com&gt;</span><br><span class="line">Date:   Sun Oct 21 08:51:41 2018 +0800</span><br><span class="line"></span><br><span class="line">    first commit</span><br></pre></td></tr></table></figure></li></ul><h1 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h1><p>在Git中，用HEAD表示当前版本,上一个版本就是HEAD^<br>一般使用git log 查看版本的 commit id<br>通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 81e27beccb5576f2e02f90ad2c373d8a7341268e</span><br></pre></td></tr></table></figure></p><p>来回退到某个版本</p><h1 id="暂存区和工作区"><a href="#暂存区和工作区" class="headerlink" title="暂存区和工作区"></a>暂存区和工作区</h1><p>关于暂存区和工作区, 工作区就是我们能看见的目录。</p><blockquote><p>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；<br>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p></blockquote><p>有了暂存区，那么平时我们可以add多次，将多次改动累计到一次进行commit操作。因为git是管理修改，而不是管理文件的。</p><p>如果要删除某个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm readme.txt</span><br><span class="line">git rm readme.txt</span><br><span class="line">git commit -m &quot;remove readme.txt&quot;</span><br></pre></td></tr></table></figure></p><p>远程库的名字就是origin，这是Git默认的叫法<br>HEAD严格来说不是指向提交，而是指向master</p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>分支是版本库之下的一个概念，一个版本库可以有多个分支，<br>修改的提交时基于当前的分支的，切换分支后，会看不见之前分支的修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch dev 创建分支</span><br><span class="line">git branch 查看分支</span><br><span class="line">git checkout dev 切换分支</span><br><span class="line">git merge dev 合并分支到当前分支</span><br><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure></p><p>合并分支会需要解决冲突，解决冲突就是编辑冲突的文件重新git add并commit提交。能够看出，基于文件的工作流是最为方便的，不会存在冲突，也不会在协作中出现相互覆盖。</p><p>分支管理策略</p><blockquote><p>在实际开发中，我们应该按照几个基本原则进行分支管理：<br>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；<br>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；<br>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p></blockquote><p>这种策略还是不好，如果不基于文件进行管理，会需要解决大量的冲突，在团队协作中增加许多工作量。<br>在实际工作中，我们是通过git clone多个库文件，然后checkout 来实现不同分支的管理的。但是我们是测试团队，对代码的要求要低很多。</p><p>推送是基于分支的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v 查看远端库地址</span><br><span class="line">git pull 拉取远端的仓库</span><br><span class="line">git push origin master 推送本地至master分支</span><br></pre></td></tr></table></figure></p><p>git clone 只会看见master分支，需要看见远端其他分支则需要本地创建, git push 也一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev origin/dev</span><br><span class="line">$ git push origin dev</span><br></pre></td></tr></table></figure></p><h1 id="标签tag"><a href="#标签tag" class="headerlink" title="标签tag"></a>标签tag</h1><p>标签就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动）<br>切换到想打标签的分支，找到想打标签的commit<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0 &lt;commit-id&gt;</span><br><span class="line">git tag 列出所有标签</span><br></pre></td></tr></table></figure></p><p>有点麻烦的是标签不是按照时间排序的</p><h1 id="搭建本地git-服务器"><a href="#搭建本地git-服务器" class="headerlink" title="搭建本地git 服务器"></a>搭建本地git 服务器</h1><p>通过树莓派，可以方便地进行实验<br>安装git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core</span><br></pre></td></tr></table></figure></p><p>创建git用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser git</span><br><span class="line">password:g***i</span><br></pre></td></tr></table></figure></p><p>此时在树莓派的pi用户路径下面新建一个git repo即可进行clone操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/pi</span><br><span class="line">mkdir git_test</span><br><span class="line">cd git_test</span><br><span class="line">git init</span><br></pre></td></tr></table></figure></p><p>在本地进行clone<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@192.168.1.6:/home/git/git_test</span><br></pre></td></tr></table></figure></p><p>但是每次进行git clone需要输入密码</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于git这样的工具，重点在于使用。但是使用过一段时间之后的总结，才会让自己有所提升。</p><p>我自己工作中的一些感受:</p><ul><li>解决冲突很麻烦，协作中，最好已基于文件的方式进行合作</li><li>稳定的master分支一定要保证</li><li>由于提交会很多，开发重要节点打tag很重要</li><li>常用的命令会总结，不常用的命令会查询</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git是版本控制工具，程序员必备技能。以前在学校的时候自己跟着教程学习过，现在在工作中已经用了一段时间了。在此进行总结和复习。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="http://yoursite.com/categories/tech/"/>
    
    
      <category term="git learn" scheme="http://yoursite.com/tags/git-learn/"/>
    
  </entry>
  
  <entry>
    <title>搭建我的Hexo博客</title>
    <link href="http://yoursite.com/2018/10/11/%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/10/11/搭建我的Hexo博客/</id>
    <published>2018-10-11T07:08:19.000Z</published>
    <updated>2018-10-21T04:07:50.600Z</updated>
    
    <content type="html"><![CDATA[<p>一直有计划搭建我自己的博客，使用了Hexo进行实现。<br><a id="more"></a><br>后面在进行选择的时候，考虑了下面几种。</p><ul><li><p>WordPress</p><p> 这是一种PHP框架，适合快速建站，对编程的要求较低，适合帮别人搭建网站，但是不容易定制，PHP语言较老。</p></li><li><p>Django和flask</p><p>  Python的web框架，功能齐全，但是学习的时间较长</p></li><li><p>Hexo</p><p> hexo很有极客范，网上教程很多，搭建简单，只能搭建静态博客，没有后台。</p></li></ul><p>PHP语言我不感兴趣，Django和flask近期也没有时间学。Hexo搭建简单，能够让我专注在博客撰写的本身，而且不需要购买域名，果断选择Hexo。我是在树莓派上进行搭建Hexo的环境搭建的。本篇博客大概分为四个部分：</p><ol><li>树莓派环境搭建</li><li>Hexo环境搭建</li><li>Hexo主题配置</li><li>部署至github</li></ol><h3 id="安装树莓派系统"><a href="#安装树莓派系统" class="headerlink" title="安装树莓派系统"></a>安装树莓派系统</h3><p>树莓派是一块小型的电脑主板，非常适合用于linux环境学习和开发。</p><p>a. 系统镜像下载地址!</p><blockquote><p><a href="https://www.raspberrypi.org/downloads/raspbian" target="_blank" rel="noopener">https://www.raspberrypi.org/downloads/raspbian</a></p></blockquote><p>b. 使用win32diskimager将系统烧写至内存卡</p><p>c. 在目录新建一个ssh的文件夹，允许进行ssh连接</p><h3 id="Hexo基础环境配置"><a href="#Hexo基础环境配置" class="headerlink" title="Hexo基础环境配置"></a>Hexo基础环境配置</h3><p>将内存卡插入树莓派上电就是一个linux 环境</p><p>安装git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core</span><br></pre></td></tr></table></figure><p>安装nvm，安装完成后需要reboot设备<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></p><p>安装npm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure></p><p>安装Hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>至此 Hexo环境便搭好了，试用一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init BlogTest</span><br><span class="line">cd BlogTest</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>此时在浏览器中输入树莓派IP加默认端口地址( <a href="http://192.168.1.4:4000" target="_blank" rel="noopener">http://192.168.1.4:4000</a> )，便能够访问生成的博客</p><h3 id="博客主题配置"><a href="#博客主题配置" class="headerlink" title="博客主题配置"></a>博客主题配置</h3><p>Hexo有很多主题，Next是非常流行的一个</p><p>安装Next<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>各种配置其实都基本是修改这两个文件</p><ul><li><p>主目录下的站点配置文件 /_config.yml文件</p></li><li><p>主题目录下的主题配置文件 /themes/next/_config.yml文件</p></li></ul><p>下面介绍以下的配置</p><ul><li><p>配置站点主题</p><p>  修改站点配置文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li><li><p>配置主题语言</p><p>  修改站点配置文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></li><li><p>配置主题风格</p><p>  修改主题配置文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure></li><li><p>配置子页面</p><p>  Next提供以下类别的页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  something: 有料</span><br></pre></td></tr></table></figure><p>  我选择启用<br>  home, archives, tags, categories, about, search 这六种页面。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page about</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>  页面内容还需要后续添加完善</p></li><li><p>配置主题搜索功能</p><p>  添加本地自定义站点内容搜索(Local search)</p><p>  首先安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>  编辑站点配置文件，新增以下内容置：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">   field: post</span><br><span class="line">   format: html</span><br><span class="line">   limit: 10000</span><br></pre></td></tr></table></figure><p>  编辑主题配置文件，启用本地搜索功能： </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Local search</span><br><span class="line">local_search:</span><br><span class="line">enable: true</span><br></pre></td></tr></table></figure></li></ul><p>还有其他的一些配置，可以访问官方文档进行查看</p><h3 id="博客部署至GitHub"><a href="#博客部署至GitHub" class="headerlink" title="博客部署至GitHub"></a>博客部署至GitHub</h3><ol><li><p>配置本地git的用户名和邮箱</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “stshihia”</span><br><span class="line">git config --global user.email “379187038@qq.com”</span><br></pre></td></tr></table></figure><p> 查看配置是否成功</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure></li><li><p>生成本地rsa密钥用于与github网站相连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &apos;379187038@qq.com&apos;</span><br><span class="line">vim /home/pi/.ssh/id_rsa.pub</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p> 可以查看其内容并贴到自己的github 密钥上, 通过ssh验证是否成功连接</p></li><li>修改站点配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:stshihia/stshihia.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol><p>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><ol start="4"><li>Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io<br>至此，访问博客地址 <a href="https://stshihia.github.io/" target="_blank" rel="noopener">https://stshihia.github.io/</a> 即可</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一些个人的经验总结：</p><ol><li>熟悉了Hexo框架，前端的世界还挺好玩的。</li><li>bilibili上能找到不错的资源</li><li>先找博客了解大概，然后通过视频进行学习操作细节，再通过博客来查漏补缺，最后官方文档可以进行查询。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p></blockquote><blockquote><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p></blockquote><blockquote><p><a href="https://www.bilibili.com/video/av17653359?from=search&amp;seid=11432917052424913522" target="_blank" rel="noopener">https://www.bilibili.com/video/av17653359?from=search&amp;seid=11432917052424913522</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直有计划搭建我自己的博客，使用了Hexo进行实现。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="http://yoursite.com/categories/tech/"/>
    
    
      <category term="hexo learn" scheme="http://yoursite.com/tags/hexo-learn/"/>
    
  </entry>
  
</feed>
