<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CSS学习笔记]]></title>
    <url>%2F2019%2F01%2F09%2FCSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[层叠样式表CSS(Cascading Style Sheets)与HTML搭配使用，共同构建前端页面。HTML负责内容，CSS负责显示，达到了样式与内容的分离。 HTML引入CSS三种方式引入CSS，W3C的文章说的很清楚。 外部样式表 当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观。 123&lt;head&gt;&lt;link rel="stylesheet" type="text/css" href="mystyle.css"&gt;&lt;/head&gt; 内部样式表 当单个文件需要特别样式时，就可以使用内部样式表。你可以在 head 部分通过 &lt;style&gt;标签定义内部样式表。 1234567&lt;head&gt;&lt;style type="text/css"&gt;body &#123;background-color: red&#125;p &#123;margin-left: 20px&#125;&lt;/style&gt;&lt;/head&gt; 内联样式 当特殊的样式需要应用到个别元素时，就可以使用内联样式。 使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性。以下实例显示出如何改变段落的颜色和左外边距。 123&lt;p style="color: red; margin-left: 20px"&gt;This is a paragraph&lt;/p&gt; 学习过程中，使用内联样式进行效果演示。 背景样式背景颜色，默认的颜色是transparent 颜色的表示方式有三种： 文字 1&lt;body style="background-color:gray;"&gt; RGB，红绿蓝三原色。用两个字节来表示，红色#FF0000。 1&lt;body style="background-color:#FF0000;"&gt; 另一种是数值rgb(255, 255, 255) 1&lt;body style="background-color:rgb(255,0,0);"&gt; CSS3引入了新的一种方式rgba，最后一个参数α可以简单理解为透明度。 1&lt;body style="background-color:rgba(255,0,0,0.5);"&gt; 背景图片 背景是图片加上上文的rgba, 可以做出内层的标记浮在背景图片上的效果。 12345&lt;body style="background-image:url(timg1440x900.jpg);"&gt;&lt;p style="background-color: rgba(255,0,0,0.5)"&gt; 这是第一段&lt;/p&gt;&lt;/body&gt; 对于背景图片background-image属性，当使用的图片较小时有一些特点： 会自动复制进行填充当前页面， 也可以不重复。 可以在x和y方向进行重复 repeat-x，repeat-y 123&lt;body style="background-image:url(timg213x160.jpg); background-repeat:repeat-x;"&gt;&lt;/body&gt; 当设定为no-repeat时，可以对位置background-position进行设定: center left top right 绝对位置100px 100px 1234&lt;body style="background-image:url(timg213x160.jpg); background-repeat:no-repeat; background-position:top right"&gt;&lt;/body&gt; 默认是让背景图片随着文字一起滚动，可以设定background-attanchment为fixed，即背景则不会随着页面一起滚动。 12345678&lt;body style="background-image:url(timg213x160.jpg); background-attanchment:fixed;"&gt;&lt;p style="background-color: rgba(255,0,0,0.5)"&gt; 这是第一段 &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; 为了看出效果，加很多换行。&lt;/p&gt;&lt;/body&gt; 小结：学习了背景颜色，背景图片一些样式表写法。 文本样式段落段落文字的颜色color 12345&lt;body&gt; &lt;p style="color:red"&gt; 我是一个段落 &lt;/p&gt;&lt;/body&gt; 段落的缩进text-indent 单位可以em(em-quads)和10%这种相对单位。也有px，pt（印刷上的单位=1/72inch）,cm,mm和in这种绝对的单位。 12345&lt;body&gt; &lt;p style="text-indent:2em"&gt; 我是一个段落,为了体现缩进，所以我需要说很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多的话。 &lt;/p&gt;&lt;/body&gt; 有趣的一点是，缩进设定为负值。下面的例子是这种可以实现悬挂缩进效果 12345&lt;body&gt; &lt;p style="text-indent:-2em; padding:2em;"&gt; 我是一个段落,为了体现悬挂缩进，所以我需要说很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多的话。 &lt;/p&gt;&lt;/body&gt; 段落的行高line-height 12345&lt;body&gt; &lt;p style="text-indent:2em;line-height:2em;"&gt; 我是一个段落,为了体现行高，所以我需要说很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多的话。 &lt;/p&gt;&lt;/body&gt; 段落对齐方式text-align 对齐方式有align，left，right，center，justify（两端对齐） 12345&lt;body&gt; &lt;p style="text-indent:2em;text-align:right;"&gt; 我是一个段落,为了对齐方式，所以我需要说很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多的话。 &lt;/p&gt;&lt;/body&gt; 段落中空格的宽度word-spacing, 字符间的宽度letter-spacing 123456&lt;body&gt; &lt;p style="text-indent:2em;wrod-spacing:10px; letter-spacing:10px"&gt; 我是一个段落,为了空格的宽度，我要说几个的 空 格。 为了体现字符间距，我还是要说很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多的话。 &lt;/p&gt;&lt;/body&gt; 段落中文字的大小写转换，text-transform 可以设置为：uppercase(英文转大写), lowercase(英文转小写), capitalize(英文转首字母大写) 12345&lt;body&gt; &lt;p style="text-indent:2em;text-transform:uppercase;"&gt; 我是一个段落,为了体现文字的大小写转换，所以我需要说个hello。 &lt;/p&gt;&lt;/body&gt; 文字装饰text-decoration 可以是underline上划线，overline下划线，line-through中横线 12345&lt;body&gt; &lt;p style="text-indent:2em;text-decoration:underline overline"&gt; 我是一个段落,为了体现划线，所以我需要说很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多很多的话。你看这样像不像稿纸的样式？ &lt;/p&gt;&lt;/body&gt; 对空白字符的处理white-space pre（有多少回车有多少空格全都生效，且不会做自动的卷绕)， pre-wrap（有多少回车有多少空格全都生效，做自动的卷绕）， nowrap不卷绕, pre-line合并空格，保留换行 字体 字体的样式font-family 可以指定通用字体的大类，也可以指定具体的字体名称 通用字体大类 serif 大多数的英文字体都是serif，矢量字体，有点类似花体，竖线的上有小横线 sans-serif，竖线上没有小横线 monospace 等宽字体，用于程序代码和终端输出 cursive 类似手写的字体，草书 fantansy 无法归类的字体 一般的做法是，指定保险的做法是，指定特定的字体，再指定某个通用字体的大类。 1&lt;p style="font-family: Times, TimeNR, serif"&gt;&lt;/p&gt; 字体常用属性 font-style: 可设为normal，italic(是使用字体的斜体)，oblique(是让没有斜体属性的字体倾斜) font-variant: 可以变为大小写small-caps font-weight: 笔画宽度，可以设为bold粗体或者数值 font-size: 字体大小，可以设为px em，推荐还是用em 文字效果就像以前用word做艺术字的感觉，只不过是换成了代码的方式表达。 文字阴影效果text-shadow 三个参数，第一个是向右，第二个是向下，第三个是发散的宽度 1&lt;p style="text-shadow:3px 4px 5px rgba(0,255,0,1)"&gt;&lt;/p&gt; 雕刻的效果 1&lt;p style="text-shadow:0px -1px 0px #000000, 0px 1px 3px #606060; color:#606060"&gt;INSET&lt;/p&gt; 边框outline-style 可以设为:dashed短划线 dotted点线 double双线 groove 凹槽 outset凸的边 inset凹的边 1&lt;p style="outline-color:red;outline-style:solid;outline-width:thin"&gt;INSET&lt;/p&gt; 列表就是前面那个小黑圆可以换成其他的样式。disc，circle，squre 1234567&lt;body&gt; &lt;ul style="list-style-type:squre "&gt; &lt;li&gt;Mirror&lt;/li&gt; &lt;li&gt;sFlow&lt;/li&gt; &lt;li&gt;Security&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt; 可以使用自定义的图片 1234567&lt;body&gt; &lt;ul style="list-style-image:url(timg213x160.jpeg) "&gt; &lt;li&gt;Mirror&lt;/li&gt; &lt;li&gt;sFlow&lt;/li&gt; &lt;li&gt;Security&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt; 小圆点是不是属于文字的一部分，inside属于，outside不属于。只有文字换行时才能看出区别。 1234567&lt;body&gt; &lt;ul style="list-style-position:outside"&gt; &lt;li&gt;Mirror&lt;/li&gt; &lt;li&gt;sFlow&lt;/li&gt; &lt;li&gt;Security&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt; 表格表格的样式，border可以设为实线solid border-collapse 当设为 collapse 效果为当有多余的线的时候，合并为一条线。separate则为一条线 123456789101112131415&lt;body&gt; &lt;table style="border: 1px solid blue;border-collapse:collapse;"&gt; &lt;caption&gt;Our Module&lt;/caption&gt; &lt;tr&gt; &lt;th style="border: 1px solid blue"&gt;Mirror&lt;/th&gt; &lt;th style="border: 1px solid blue"&gt;sFlow&lt;/th&gt; &lt;th style="border: 1px solid blue"&gt;Security&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style="border: 1px solid blue"&gt;200&lt;/td&gt; &lt;td style="border: 1px solid blue"&gt;100&lt;/td&gt; &lt;td style="border: 1px solid blue"&gt;300&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt; 表格可以设置大小 1&lt;th style="width:100;height:50px"&gt; 表格中的文字可以规定排版方式 1&lt;th style="vertical-align:top;text-align:right"&gt; padding 可以指定和边线之间的距离，框模型中可以深刻理解一下。 1&lt;th style="vertical-align:top;text-align:right;width:100px;height:50px;padding:20px"&gt; 对于表格的标题的位置，可以指定caption-side 1&lt;table style="caption-side:bottom;"&gt; table-layout 设为automatic对于大表就会有点慢，也会不断变化。fixed由第一行来指定表格的大小显示，可以很快地显示出来。 框模型框模型又叫盒模型 CSS 框模型 (Box Model) 规定了元素框处理。看这篇W3C的解释文章，可以加深理解。 简而言之，元素内容、内边距、边框和外边距这四者之间的关系。 padding就是内边距，margin就是外边距。每一个元素都是一个框框。 可以指定四边的边距padding-top:10，也可以分别指定边距padding:10 20 30 40 , 不是上下左右，而是上右下左（顺时针方向） 1&lt;p style="margin:10px 20px 30px 40px"&gt;一个段落，和上右下左其他的元素都隔开10，20，30，40&lt;/p&gt; padding不能设为负值，margin是允许负值的。当两个相邻的元素的margin一起，则是取二者大的那个值 CSS 定位HTML是一种流式的排版格式，所有的元素是从左往右，从上往下流式地填满，以前的定位是通过表格来实现的。CSS定位，就是将某一个块状的元素放置到某个固定的位置。CSS1就已经提出元素是浮动的。如果要对CSS元素定位，方式有三种方式的定位：相对定位，绝对定位 浮动定位。 相对定位 不管margin的事实，会在元素该有的地方，进行偏移。原来的第二行的位置不会受影响 12345678910&lt;body&gt; &lt;div&gt; &lt;p style="position:relative;"&gt; 我是第一段 &lt;/p&gt; &lt;p&gt; 我是第二段 &lt;/p&gt; &lt;/div&gt;&lt;/body&gt; 绝对定位 会把元素从原有的流式定位上去掉。然后第一段的定位是从不断找父元素，div未定位，body定位了，则显示在body的位置上。第二段则会因为第一段从流式定位的去除，则到第一位上。 12345678910&lt;body&gt; &lt;div&gt; &lt;p style="position:absolute;"&gt; 我是第一段 &lt;/p&gt; &lt;p&gt; 我是第二段 &lt;/p&gt; &lt;/div&gt;&lt;/body&gt; 浮动定位 会将某个元素永远定在一个地方。压缩页面，它会挤占原来的元素，CSDN那种讨厌的广告应该就是这个原理。 1234567891011&lt;body&gt; &lt;div&gt; &lt;img src="timg213x160.jpg" style="float:right"&gt; &lt;p style="position:absolute;"&gt; 我是第一段 &lt;/p&gt; &lt;p&gt; 我是第二段 &lt;/p&gt; &lt;/div&gt;&lt;/body&gt; div是一种块状元素。span是一种行内的块状元素。h5出现了很多的不同名字的div，比如slide，header，foot等，这些块状元素就用来结合定位技术使用。 CSS选择器选择器就是选定某些标记，对其的样式进行管理。 元素选择器最后呈现的效果是叠加的 123456&lt;head&gt; &lt;style&gt; p,th,td &#123;border: 1px solid blue&#125; p &#123;background:red&#125; &lt;/style&gt;&lt;/head&gt; 类选择器 *.important的意思是所有类名class为important的元素 123456789101112&lt;head&gt; &lt;style&gt; p,th,td &#123;border: 1px solid blue&#125; p &#123;background:green&#125; *.important &#123;color:red&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p class="important"&gt;我是一个class为important的paragraph&lt;/p&gt; &lt;p&gt;我是普通的paragraph&lt;/p&gt; &lt;p&gt;我是普通的paragraph&lt;/p&gt;&lt;/body&gt; p.important则是所有id为important的p #important则是指id选择器，用#而不是用.来进行选择 123456789101112&lt;head&gt; &lt;style&gt; p,th,td &#123;border: 1px solid blue&#125; p &#123;background:green&#125; *#important &#123;color:red&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p id="important"&gt;我是一个class为import的paragraph&lt;/p&gt; &lt;p&gt;我是普通的paragraph&lt;/p&gt; &lt;p&gt;我是普通的paragraph&lt;/p&gt;&lt;/body&gt; 有title这个属性的标记。 123456789101112&lt;head&gt; &lt;style&gt; p,th,td &#123;border: 1px solid blue&#125; p &#123;background:green&#125; *[title]&#123;color:red&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p id="important"&gt;我是一个class为important的paragraph&lt;/p&gt; &lt;p title="paragraph with title"&gt;我是有title的paragraph&lt;/p&gt; &lt;p&gt;我是普通的paragraph&lt;/p&gt;&lt;/body&gt; 子元素选择器 p em这种情况是子选择器，p&gt;em则p标签一定是em的上级标签。h1+p则对p标签相邻的em标签 123456789101112&lt;head&gt; &lt;style&gt; p,th,td &#123;border: 1px solid blue&#125; p em &#123;background:green&#125; *[title]&#123;color:red&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p id="important"&gt;我是一个class为import的paragraph&lt;/p&gt; &lt;p title="paragraph with title"&gt;我是普通的paragraph&lt;/p&gt; &lt;p&gt;我是&lt;em&gt;普通&lt;/em&gt;的paragraph&lt;/p&gt;&lt;/body&gt; 超链接所涉及到的伪类 &#123;color:#FFFFFF&#125; 已访问1234a:link &#123;color:#FF0000&#125; 点击时a:hover &#123;color:#00FF00&#125; 悬停时a:active &#123;color:#0000FF&#125; 未访问a:visited &#123;color:#FFFFFF&#125; 已访问 12345678910111213141516&lt;head&gt; &lt;style&gt; a &#123;color:#000000;&#125; a:visited &#123;color:#FFFFFF&#125; a:link &#123;color:#FF0000&#125; a:hover &#123;color:#00FF00&#125; a:active &#123;color:#0000FF&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a href="http://www.baidu.com"&gt;百度&lt;/a&gt; &lt;a href="http://news.163.com"&gt;网易&lt;/a&gt; &lt;a href="http://news.qq.com"&gt;qq&lt;/a&gt; &lt;a href="http://news.sohu.com"&gt;搜狐&lt;/a&gt; &lt;a href="http://news.yahoo.com"&gt;雅虎&lt;/a&gt;&lt;/body&gt; 总结了解一些CSS常见用法。知道了HTML如何引入CSS，背景样式，段落样式，文字样式，表格样式，CSS框模型，CSS选择器。 参考 翁恺的CSS3课程 W3C的CSS参考]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>web CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML学习笔记]]></title>
    <url>%2F2019%2F01%2F09%2Fhtml-note%2F</url>
    <content type="text"><![CDATA[HTML(HyperText Markup Language)超文本标记语言，可以理解为是一种排版语言，用来表示文本和图片以及连接在浏览器上如何显示。 HTML是各个浏览器厂家来进行形成事实上的标准，通过W3C形成规范文本。 早期的dos系统只有三个字母的文件后缀，所以.html有时候又是.htm。 学习准备准备文本编辑器和浏览器即可。IDE可以管理不同页面间的关系，提供所见即所得的功能。学习阶段应专注，不需要。 HTML语言框架12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;我的页面&lt;/title&gt; &lt;meta charset=utf-8&gt;&lt;/head&gt; &lt;body&gt; 我的第一个html页面 &lt;/body&gt;&lt;/html&gt; 以上是HTML的一个基本框架。 尖括号中表示这是一个HTML的标记。 &lt;head&gt;表示这是源文件的头，放置此源页面相关配置，例如编码格式。 &lt;body&gt;是显示的正文 &lt;!DOCTYPE html&gt;是表示页面支持html5的规范 标记最新的H5规范，HTML标记用来告诉浏览器，此标记是什么，而不是告诉浏览器这个该怎么显示。该怎么显示由CSS样式层叠表来管理。例如html中的段落标记和标题标记等，提供了整个页面的逻辑结构。避免设计上的冗余。应该记住几个最基本的标记。 123&lt;p&gt;&lt;/p&gt; 段落 paragraph&lt;br&gt; 换行 break&lt;h1&gt;&lt;/h1&gt; 标题 header 字体样式虽然由CSS来进行样式管理，但是仍然存在用来表达格式的HTML语法。当然，也可以理解为这是一种类型，意为加粗的文字。 123456789&lt;b&gt;&lt;/b&gt;&lt;i&gt;&lt;/i&gt;&lt;tt&gt;&lt;/tt&gt;等宽的西文字体&lt;del&gt;&lt;/del&gt;中横线，本质上是被删掉的字符&lt;ins&gt;&lt;/ins&gt;下划线，本质上是增加的字符，具体的显示都由浏览器表示&lt;s&gt;&lt;/s&gt;不推荐的，过时的&lt;sup&gt;&lt;/sup&gt;上标&lt;sub&gt;&lt;/sub&gt;下标 公式最好还是用其他软件做好，作为图片嵌入&lt;mark&gt;&lt;/mark&gt;强调，表现为高亮 短语样式html5引入了一些短语格式，用来表示文字的意义。这些都是短语样式，所以不会引起分行。 12345678&lt;em&gt;强调&lt;/em&gt;&lt;strong&gt;着重&lt;/strong&gt;&lt;cite&gt;引用&lt;/cite&gt;&lt;code&gt;代码&lt;/code&gt;&lt;kbd&gt;用户输入&lt;/kbd&gt;&lt;samp&gt;示例代码&lt;/samp&gt;&lt;var&gt;变量&lt;/var&gt;&lt;dfn&gt;定义&lt;/dfn&gt; 特殊格式有一些特殊的格式，也比较常用，可以记住 12345678910111213&lt;address&gt;&lt;/address&gt; 地址&lt;blockquote&gt;&lt;/blockquote&gt;缩进&lt;q&gt;&lt;/q&gt; 小引用，一般表现为加一个小引号&lt;pre&gt;&lt;/pre&gt; 预格式化，原样输出,保留换行和空格&lt;code&gt;&lt;pre&gt;int main()&#123; printf("Hello\n"); return 0;&#125;&lt;/pre&gt;&lt;/code&gt; 属性对于各个标记，都可以添加属性。属性值之前是必须要加双引号，但是现在不必加。不过我看了一下各个页面，基本上大家都还是加上了的。 12&lt;hr width=50% align=left size=10&gt; 分割线，显示的效果靠左，50%页面，线的宽度为10 &lt;abbr title="中华人民共和国"&gt;PRC&lt;/abbr&gt; 缩写 鼠标放在PRC上时，会出现提示。title这个属性各个标记都有。 转义字符常用的转义字符，以下四个可以记住。 1234&amp;lt; 小于号&amp;gt; 大于号&amp;amp; and符号&amp;nbsp; 不可打断的空格 列表三种列表在HTML中的使用。 123456789101112131415161718&lt;ul&gt; &lt;li&gt;Mirror&lt;/li&gt; &lt;li&gt;sFlow&lt;/li&gt; &lt;li&gt;Security&lt;/li&gt;&lt;/ul&gt; 无序列表&lt;ol start=2&gt; &lt;li&gt;Mirror&lt;/li&gt; &lt;li&gt;sFlow&lt;/li&gt; &lt;li&gt;Security&lt;/li&gt;&lt;/ol&gt; 有序列表&lt;dl&gt; &lt;dt&gt;Mirror&lt;/dt&gt; &lt;dd&gt;端口镜像&lt;/dd&gt; &lt;dt&gt;sFlow&lt;/dt&gt; &lt;dd&gt;端口采样&lt;/dd&gt; &lt;dt&gt;Security&lt;/dt&gt; &lt;dd&gt;安全&lt;/dd&gt;&lt;/dl&gt; 定义列表，类似字典 图片 图片一般支持三种格式，png,jpg,gif。 对于浏览器来说，img标记就是一个字符，我们不加其他的样式指定，则会与其他字符并排在一起。 如果指定了图片大小，那么浏览器在图片尚未加载完成的时候会预先留出图片的位置。 在图片较大，alt属性会在图片尚未加载完成的时候，显示在对应的位置。 12&lt;img src="example.gif" alt="hint" height="500" width="500"&gt;&lt;iframe src="www.baidu.com"&gt;&lt;/iframe&gt; 内联框架，可以直接嵌入一个网页。 链接链接是最常用的HTML标记。其中的属性href，一定要把协议http://加上，否则浏览器会认为是当前路劲下的一个文件。属性target=”_blank”，表示在新的页面打开。 1&lt;a href="http://www.baidu.com"&gt;我是一个链接&lt;/a&gt; 可以使用ID和#进行页面内具体某个标记位置的精确定位。 12&lt;a href="#page_end"&gt;导航到页面尾部&lt;/a&gt;&lt;p id="page_end"&gt;&lt;/p&gt; 表格基础的表格使用，记住三个元素，表格table，行tr，列td 123456789101112&lt;table&gt; &lt;tr&gt; &lt;td&gt;Mirror&lt;/td&gt; &lt;td&gt;200&lt;/td&gt; &lt;td&gt;Tianshan&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;sFlow&lt;/td&gt; &lt;td&gt;100&lt;/td&gt; &lt;td&gt;Tianshan&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 这样显示出来没有格式。可以加一点格式，boder是表格的线宽，th是表头，caption是表格的标题。td可以使用colspan来占据一行. 12345678910111213141516171819202122&lt;table border="1"&gt; &lt;caption&gt;我是表格的标题&lt;/caption&gt; &lt;tr&gt; &lt;th&gt;Module&lt;/th&gt; &lt;th&gt;Case&lt;/th&gt; &lt;th&gt;PIC&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Mirror&lt;/td&gt; &lt;td&gt;200&lt;/td&gt; &lt;td&gt;Tianshan&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;sFlow&lt;/td&gt; &lt;td&gt;100&lt;/td&gt; &lt;td&gt;Tianshan&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan="3"&gt;DTEL&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; H5增加了thead，tbody，tfoot三个标记，当表格过长的时候，上下滑动，表头和表尾可以不消失。 123456789101112131415161718192021222324252627&lt;table border="1"&gt; &lt;caption&gt;我是表格的标题&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Module&lt;/th&gt; &lt;th&gt;Case&lt;/th&gt; &lt;th&gt;PIC&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Mirror&lt;/td&gt; &lt;td&gt;200&lt;/td&gt; &lt;td&gt;Tianshan&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;sFlow&lt;/td&gt; &lt;td&gt;100&lt;/td&gt; &lt;td&gt;Tianshan&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td colspan="3"&gt;DTEL&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt;&lt;/table&gt; 总结根据浙江大学翁恺老师的HTML教程学习的学习笔记。我是在MOOC上学到的C语言翁恺老师教程。他讲的很清楚，也很实用。 我明白了以下知识点： HTML负责标记和组织页面上的内容是什么，如何显示由CSS决定 HTML基本框架结构 HTML标记，标记的属性 记住了常用的HTML标记 参考 翁恺老师HTML教程 w3school教程]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>web html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给亲爱的一封信]]></title>
    <url>%2F2018%2F12%2F30%2Fto-my-lvoe%2F</url>
    <content type="text"><![CDATA[在博客上给亲爱的写情书，没有别人看，只有你在看，其实也是挺幸福的一件事情。 又是情书，又是博客，如何将这二者结合，这便成了问题。本文旨在分享我和亲爱的的爱情中有关计算机的部分，技术层面很粗糙，是个总结，也指明今年的发展方向。 解决电脑问题表达爱普通的活动认识，但是由于是计算机学院的人，电脑出了问题得找到我头上。我和亲爱的认识，肯定不是因为重装系统，但是和各种电脑问题分不开。 激活系统激活系统在网络上有很多的下载，但是由于涉及版权，自然没有大厂能提供软件下载链接。这便开始考验我的搜索能力和分辨网络上良莠不齐的资源的能力。百度搜素小马激活即可，不排除风险，但是对于我们普通用户能够满足需求。 当初正是凭借着一个激活软件，稳稳地树立了在亲爱的心目中计算机学院学长的形象。 安装软件那么常用软件的靠谱安装包一定要备份一下，如果能够稳定提供下载的软件那么不必备份。但是安装完成后，不必安装太全，因为确实也装不全。这时，主动沟通，你需要什么软件，这才是正确的方法。 当初就是靠着一个PS安装包，坐稳了在亲爱的心中的靠谱学长形象。哈哈！ 重装系统在激活系统事件之后，我便意识到，不会点这些技术完全不能行走江湖。不能行走江湖我无所谓，但是形象毁了那可就严重了。重装系统由于其操作炫酷，解决问题实际，看起来工作量大，是必备的技术。所以，我各种研究，还忍痛把自己的笔记本正版系统抹掉，学习了重装系统。果然，后面不仅帮亲爱的重装过系统，还帮亲爱的的同学装过，亲爱的的姐夫装过。。。坐稳了亲爱的心目中修电脑高科技人才的形象甚至到了公司，还是装过。网上的教程很多，两点自己的个人经验。 系统镜像下载 官方下载慢的坑爹，站点 itellyou获得大家一致好评。 安装U盘制作 不要使用大白菜、老毛桃，软碟通是最佳的选择。 数据备份 安装之前一定告知用户C盘将被格式化备份数据，否则好心办坏了事就惨啦。 print方法表达爱解决具体问题能够让生活顺畅，但是不还得浪漫嘛。此时可以使用常见的打印方法来展示理工科男生的浪漫。打印其实程序调试的方法，但是简单粗暴，且给人极客的感觉。当初就是凭借这些技能，坐稳了在亲爱的心目中编程大神的形象，侧面也显示我这个人不傻，以后是很浪漫的。 Excel 画心形线Excel在基本上都有，所以不存在运行环境的问题。但是缺点就是极客范要少一点。网上的教程简直不要太多。略加搜索，制作完成后，拷贝发送即可。现在再搜搜，大家都已经进化啦，心形线画的更加好看。我当初的Excel还是被亲爱的保存的好好的，也是一份当初的美好。 编程语言画心形线Excel由于是常见的软件，所以你再画的再漂亮，别人也不觉得很厉害。所以，通过学习C语言，在控制台打印心形线，黑框框就是黑客的象征。网上找段程序员炫技的打印代码，调试运行，展示给亲爱的看，此时还是得表现出这都是低级技术的样子，才能坐稳亲爱的头一把交椅。来段代码吧。 12345678910#include &lt;stdio.h&gt;int main()&#123; for (float y=1.5f; y&gt;-1.5f; y-=0.1f)&#123; for (float x=-1.5f; x&lt;1.5f; x+=0.05f)&#123; float a=x*x+y*y-1; putchar(a*a*a-x*x*y*y*y&lt;=0.0f?'*':' '); &#125; putchar('\n'); &#125;&#125; 单片机学自动化，玩了几天开发板。当时亲爱的说别的学院的同学能够让显示屏显示字，我当时就怒了，这有什么了不起。但是开发板不在，赶紧把Proteus调出来，分分钟在模拟软件上使用51单片机与1602显示屏打印了一个woaiyimeiduo，当场就把亲爱的给感动坏了。我也当时牛逼坏了。哈哈~充分说明大家学习东西，一定要活学活用，只要青春脑子灵，不断加深好感情。 软件表达爱在随后的日子里，随着我技术的提升，渐渐脱离了print的低级趣味，同时遇见了Python，简直就是打开了新世界的大门。我尝试了画词云图，微信发送消息催起床，帮忙处理Excel数据等。但，我个人觉得这些都没有脱离前面的方法表达爱，没有脱离低级趣味。而且，亲爱的也提升了自己，对我这些雕虫小技已经开始不屑一顾了。我的光辉形象已经不太稳，吹牛骗不了她了。今天特此写这篇博客，要开发一个Web站点，在上面用漂亮的页面记录和亲爱的感情。站点短期肯定是搞不定啦，不还是要上班和陪亲爱的耍嘛。这篇博客能够在公网上访问，所以，也算数啦。今年加油学好Web技术，就能改善这个尴尬的局面，让亲爱的满意。 总结这篇博客写于胖胖的生日前夕，用来纪念我们的爱情。作为一个程序员，以最真挚的方式来表达对胖胖的爱。胖胖肯定特别感动。嘿嘿，喵喵！]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>love</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python进阶]]></title>
    <url>%2F2018%2F10%2F31%2FPython%E8%BF%9B%E9%98%B6%E4%B8%80%2F</url>
    <content type="text"><![CDATA[在熟悉了python的基本语法后，通过不断地实践，越发地爱上了这门语言。需要深入地理解和用好它。在学习PEP 8相关文档过程中，获得了一份很好的文档，里面介绍了几个tips，值得python新手进阶的时候学习。 What’s an IdiomIdioms我觉得在这里叫惯用语最合适，指的是使用python的过程中符合python哲学的“正确”做法。通俗一点可以叫套路，高雅一点可以叫范式。相比错误的做法，采用这些idioms，有以下好处。 可读性高 执行效率高 内存占用少 让程序可执行亦可引入代码如下：1if __name__ == &apos;__main__&apos;: 这句代码让该脚本能够在cmd中python xxx.py执行，也可以作为一个 module 被别的代码进行import。 正确地判断布尔值代码如下：12if x:if not x: 不要像C语言那样各种判断，python的数据类型都进行了封装。例如：12345678910# GOODname = &apos;Safe&apos;pets = [&apos;Dog&apos;, &apos;Cat&apos;, &apos;Hamster&apos;]owners = &#123;&apos;Safe&apos;: &apos;Cat&apos;, &apos;George&apos;: &apos;Dog&apos;&#125; if name and pets and owers: print(&quot;we have pets&quot;) # NOT SO GOODif name != &apos;&apos; and len(pets) &gt; 0 and owers != &#123;&#125;: print(&quot;we have pets&quot;) 不必在判断非空这件事情上浪费代码。 使用 in代码如下:1234# containerif item in items:# iterationfor item in items: 分别举例说明一下。 a. 容器12345678# GOODname = &apos;Safe Hammad&apos;if &apos;H&apos; in name: print(&quot;ok&quot;)# NOT SO GOODif name.find(&apos;H&apos;)! = -1: print(&quot;ok&quot;) 这样的写法，阅读很清晰。能够在内置的数据类型中使用（包括列表，字典，集合，字符串）。封装的类，如果实现了contains 方法，也可以实现。 b. 迭代器12345678910# GOODpets = [&apos;Dog&apos;, &apos;Cat&apos;, &apos;Hamster&apos;]for pet in pets print(pet)# NOT SO GOODi = 0while i &lt; len(pets): print(&apos;A&apos;, pets[i], &apos;can be very cute!&apos;) i += 1 这样的写法,代码更加简洁。同样在内置的数据类型中使用。封装的类，如果实现了iter 方法，也可以实现。这极大地简化了for循环的语句。 交换变量代码如下：1a, b = b, a 不必再像C语言使用temp变量进行交换，减少代码。 使用序列生成字符串代码如下：1&apos;&apos;.join(some_strings) 相比使用+拼接字符串，时间复杂度更低。1234567891011# GOODchars = [&apos;S&apos;, &apos;a&apos;, &apos;f&apos;, &apos;e&apos;]name = &apos;&apos;.join(chars)print(name)# NOT SO GOODchars = [&apos;S&apos;, &apos;a&apos;, &apos;f&apos;, &apos;e&apos;]name = &apos;&apos;for char in chars: name += charprint(name) 捕获异常代码如下：12try:except: 这里有个概念，鸭子类型（duck typing）。它指的是，如果一个对象，走路像鸭子，叫声像鸭子，那么它一定是鸭子。这是面向对象中的多态（polymorphism）的理论。使用异常而不是使用if来进行各种判断检查，将把我们通过写代码排除各种特殊情况中解放出来。例如：12345678910111213# GOODd = &#123;&apos;x&apos;: &apos;5&apos;&#125;try: value = int(d[&apos;x&apos;])except (KeyError, TypeError, ValueError): value = None# NOT SO GOODif &apos;x&apos; in d and \ isinstance(d[&apos;x&apos;], str) and \ d[&apos;x&apos;].isdigit(): value = int(d[&apos;x&apos;])else: value = None 枚举代码如下：1for i, item in enumerate(items): 当既需要遍历容器内的元素，又需要容器内元素的下标时，这个方法便派上用场了。 表达式来构建列表代码如下：1[i * 3 for i in data if i &gt; 10] 对于一些比较简单的变换，这种方法非常简洁。如果太复杂，还是使用常规的for+if的语句。我认为判断的依据在于该语句是否太长而影响可读性。 zip创建字典代码如下1d = dict(zip(keys, values)) 代码简洁，避免使用循环进行创建。 使用 _ 接收无用变量代码如下：1for k, _ in [(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)] 对于元组中的数值我们不需要，那么使用下划线来接收。如果是以下形式：1for k, j in [(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)] 难免阅读者会去考虑变量j的用途，影响可读性。 总结这些idioms很有帮助。 12345678910111213if __name__ == &apos;__main__&apos;:if x:if not x:# containerif item in items:# iterationfor item in items:a, b = b, afor k, _ in [(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)] 这些我现在已经深刻理解，成为我的python代码风格一部分， 12345678910&apos;&apos;.join(some_strings)try:except:d = dict(zip(keys, values))for i, item in enumerate(items):[i * 3 for i in data if i &gt; 10] 这些我还需要继续熟悉之中。 参考 http://safehammad.com/downloads/python-idioms-2014-01-16.pdf https://docs.python.org/3.1/howto/doanddont.html]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>python coding rule</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git学习笔记]]></title>
    <url>%2F2018%2F10%2F21%2Fgit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[git是版本控制工具，程序员必备技能。以前在学校的时候自己跟着教程学习过，现在在工作中已经用了一段时间了。在此进行总结和复习。 git的初始化操作我通过一系列的命令对操作进行复习和解释。 安装git后，需要指定用户名和邮箱 12$ git config --global user.name &quot;s********a&quot;$ git config --global user.email &quot;3**********.com&quot; git init会初始化一个本次仓库 123mkdir git_testcd git_testgit init git 提交文件 git add 添加文件 git commit 将文件提交至版本库 123touch readme.txtgit add readme.txtgit commit -m &quot;first commit&quot; git log 查看多次提交的版本文件 123456sssdembp:git_test sss$ git logcommit 81e27beccb5576f2e02f90ad2c373d8a7341268e (HEAD -&gt; master)Author: stshihia &lt;379187038@qq.com&gt;Date: Sun Oct 21 08:51:41 2018 +0800 first commit 回退版本在Git中，用HEAD表示当前版本,上一个版本就是HEAD^一般使用git log 查看版本的 commit id通过1git reset --hard 81e27beccb5576f2e02f90ad2c373d8a7341268e 来回退到某个版本 暂存区和工作区关于暂存区和工作区, 工作区就是我们能看见的目录。 第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。 有了暂存区，那么平时我们可以add多次，将多次改动累计到一次进行commit操作。因为git是管理修改，而不是管理文件的。 如果要删除某个文件123rm readme.txtgit rm readme.txtgit commit -m &quot;remove readme.txt&quot; 远程库的名字就是origin，这是Git默认的叫法HEAD严格来说不是指向提交，而是指向master 分支分支是版本库之下的一个概念，一个版本库可以有多个分支，修改的提交时基于当前的分支的，切换分支后，会看不见之前分支的修改12345git branch dev 创建分支git branch 查看分支git checkout dev 切换分支git merge dev 合并分支到当前分支git branch -d dev 合并分支会需要解决冲突，解决冲突就是编辑冲突的文件重新git add并commit提交。能够看出，基于文件的工作流是最为方便的，不会存在冲突，也不会在协作中出现相互覆盖。 分支管理策略 在实际开发中，我们应该按照几个基本原则进行分支管理：首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。 这种策略还是不好，如果不基于文件进行管理，会需要解决大量的冲突，在团队协作中增加许多工作量。在实际工作中，我们是通过git clone多个库文件，然后checkout 来实现不同分支的管理的。但是我们是测试团队，对代码的要求要低很多。 推送是基于分支的123git remote -v 查看远端库地址git pull 拉取远端的仓库git push origin master 推送本地至master分支 git clone 只会看见master分支，需要看见远端其他分支则需要本地创建, git push 也一样12$ git checkout -b dev origin/dev$ git push origin dev 标签tag标签就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动）切换到想打标签的分支，找到想打标签的commit12git tag v1.0 &lt;commit-id&gt;git tag 列出所有标签 有点麻烦的是标签不是按照时间排序的 搭建本地git 服务器通过树莓派，可以方便地进行实验安装git1sudo apt-get install git-core 创建git用户12sudo adduser gitpassword:g***i 此时在树莓派的pi用户路径下面新建一个git repo即可进行clone操作1234cd /home/pimkdir git_testcd git_testgit init 在本地进行clone1git clone git@192.168.1.6:/home/git/git_test 但是每次进行git clone需要输入密码 总结关于git这样的工具，重点在于使用。但是使用过一段时间之后的总结，才会让自己有所提升。 我自己工作中的一些感受: 解决冲突很麻烦，协作中，最好已基于文件的方式进行合作 稳定的master分支一定要保证 由于提交会很多，开发重要节点打tag很重要 常用的命令会总结，不常用的命令会查询 参考 https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>git learn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建我的Hexo博客]]></title>
    <url>%2F2018%2F10%2F11%2F%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[一直有计划搭建我自己的博客，使用了Hexo进行实现。后面在进行选择的时候，考虑了下面几种。 WordPress 这是一种PHP框架，适合快速建站，对编程的要求较低，适合帮别人搭建网站，但是不容易定制，PHP语言较老。 Django和flask Python的web框架，功能齐全，但是学习的时间较长 Hexo hexo很有极客范，网上教程很多，搭建简单，只能搭建静态博客，没有后台。 PHP语言我不感兴趣，Django和flask近期也没有时间学。Hexo搭建简单，能够让我专注在博客撰写的本身，而且不需要购买域名，果断选择Hexo。我是在树莓派上进行搭建Hexo的环境搭建的。本篇博客大概分为四个部分： 树莓派环境搭建 Hexo环境搭建 Hexo主题配置 部署至github 安装树莓派系统树莓派是一块小型的电脑主板，非常适合用于linux环境学习和开发。 a. 系统镜像下载地址! https://www.raspberrypi.org/downloads/raspbian b. 使用win32diskimager将系统烧写至内存卡 c. 在目录新建一个ssh的文件夹，允许进行ssh连接 Hexo基础环境配置将内存卡插入树莓派上电就是一个linux 环境 安装git 1sudo apt-get install git-core 安装nvm，安装完成后需要reboot设备12wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | shreboot 安装npm1nvm install stable 安装Hexo1npm install -g hexo-cli 至此 Hexo环境便搭好了，试用一下1234hexo init BlogTestcd BlogTesthexo ghexo s 此时在浏览器中输入树莓派IP加默认端口地址( http://192.168.1.4:4000 )，便能够访问生成的博客 博客主题配置Hexo有很多主题，Next是非常流行的一个 安装Next12cd your-hexo-sitegit clone https://github.com/iissnan/hexo-theme-next themes/next 各种配置其实都基本是修改这两个文件 主目录下的站点配置文件 /_config.yml文件 主题目录下的主题配置文件 /themes/next/_config.yml文件 下面介绍以下的配置 配置站点主题 修改站点配置文件 1theme: next 配置主题语言 修改站点配置文件 1language: zh-Hans 配置主题风格 修改主题配置文件 123#scheme: Muse#scheme: Mistscheme: Pisces 配置子页面 Next提供以下类别的页面 123456789menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 commonweal: 公益404 something: 有料 我选择启用 home, archives, tags, categories, about, search 这六种页面。 123hexo new page tagshexo new page abouthexo new page categories 页面内容还需要后续添加完善 配置主题搜索功能 添加本地自定义站点内容搜索(Local search) 首先安装 hexo-generator-searchdb，在站点的根目录下执行以下命令： 1npm install hexo-generator-searchdb --save 编辑站点配置文件，新增以下内容置： 12345search:path: search.xml field: post format: html limit: 10000 编辑主题配置文件，启用本地搜索功能： 123Local searchlocal_search:enable: true 还有其他的一些配置，可以访问官方文档进行查看 博客部署至GitHub 配置本地git的用户名和邮箱 12git config --global user.name “stshihia”git config --global user.email “379187038@qq.com” 查看配置是否成功 12git config user.namegit config user.email 生成本地rsa密钥用于与github网站相连接 123ssh-keygen -t rsa -C &apos;379187038@qq.com&apos;vim /home/pi/.ssh/id_rsa.pubssh -T git@github.com 可以查看其内容并贴到自己的github 密钥上, 通过ssh验证是否成功连接 修改站点配置文件1234deploy: type: git repo: git@github.com:stshihia/stshihia.github.io.git branch: master 输入12hexo generatehexo deploy Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io至此，访问博客地址 https://stshihia.github.io/ 即可 总结一些个人的经验总结： 熟悉了Hexo框架，前端的世界还挺好玩的。 bilibili上能找到不错的资源 先找博客了解大概，然后通过视频进行学习操作细节，再通过博客来查漏补缺，最后官方文档可以进行查询。 参考 https://www.cnblogs.com/fengxiongZz/p/7707219.html http://theme-next.iissnan.com/ https://www.bilibili.com/video/av17653359?from=search&amp;seid=11432917052424913522]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>hexo learn</tag>
      </tags>
  </entry>
</search>
