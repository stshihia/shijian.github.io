<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python进阶]]></title>
    <url>%2F2018%2F10%2F31%2FPython%E8%BF%9B%E9%98%B6%E4%B8%80%2F</url>
    <content type="text"><![CDATA[在熟悉了python的基本语法后，通过不断地实践，越发地爱上了这门语言。需要深入地理解和用好它。在学习PEP 8相关文档过程中，获得了一份很好的文档，里面介绍了几个tips，值得python新手进阶的时候学习。 What’s an IdiomIdioms我觉得在这里叫惯用语最合适，指的是使用python的过程中符合python哲学的“正确”做法。通俗一点可以叫套路，高雅一点可以叫范式。相比错误的做法，采用这些idioms，有以下好处。 可读性高 执行效率高 内存占用少 让程序可执行亦可引入代码如下：1if __name__ == &apos;__main__&apos;: 这句代码让该脚本能够在cmd中python xxx.py执行，也可以作为一个 module 被别的代码进行import。 正确地判断布尔值代码如下：12if x:if not x: 不要像C语言那样各种判断，python的数据类型都进行了封装。例如：12345678910# GOODname = &apos;Safe&apos;pets = [&apos;Dog&apos;, &apos;Cat&apos;, &apos;Hamster&apos;]owners = &#123;&apos;Safe&apos;: &apos;Cat&apos;, &apos;George&apos;: &apos;Dog&apos;&#125; if name and pets and owers: print(&quot;we have pets&quot;) # NOT SO GOODif name != &apos;&apos; and len(pets) &gt; 0 and owers != &#123;&#125;: print(&quot;we have pets&quot;) 不必在判断非空这件事情上浪费代码。 使用 in代码如下:1234# containerif item in items:# iterationfor item in items: 分别举例说明一下。 a. 容器12345678# GOODname = &apos;Safe Hammad&apos;if &apos;H&apos; in name: print(&quot;ok&quot;)# NOT SO GOODif name.find(&apos;H&apos;)! = -1: print(&quot;ok&quot;) 这样的写法，阅读很清晰。能够在内置的数据类型中使用（包括列表，字典，集合，字符串）。封装的类，如果实现了contains 方法，也可以实现。 b. 迭代器12345678910# GOODpets = [&apos;Dog&apos;, &apos;Cat&apos;, &apos;Hamster&apos;]for pet in pets print(pet)# NOT SO GOODi = 0while i &lt; len(pets): print(&apos;A&apos;, pets[i], &apos;can be very cute!&apos;) i += 1 这样的写法,代码更加简洁。同样在内置的数据类型中使用。封装的类，如果实现了iter 方法，也可以实现。这极大地简化了for循环的语句。 交换变量代码如下：1a, b = b, a 不必再像C语言使用temp变量进行交换，减少代码。 使用序列生成字符串代码如下：1&apos;&apos;.join(some_strings) 相比使用+拼接字符串，时间复杂度更低。1234567891011# GOODchars = [&apos;S&apos;, &apos;a&apos;, &apos;f&apos;, &apos;e&apos;]name = &apos;&apos;.join(chars)print(name)# NOT SO GOODchars = [&apos;S&apos;, &apos;a&apos;, &apos;f&apos;, &apos;e&apos;]name = &apos;&apos;for char in chars: name += charprint(name) 捕获异常代码如下：12try:except: 这里有个概念，鸭子类型（duck typing）。它指的是，如果一个对象，走路像鸭子，叫声像鸭子，那么它一定是鸭子。这是面向对象中的多态（polymorphism）的理论。使用异常而不是使用if来进行各种判断检查，将把我们通过写代码排除各种特殊情况中解放出来。例如：12345678910111213# GOODd = &#123;&apos;x&apos;: &apos;5&apos;&#125;try: value = int(d[&apos;x&apos;])except (KeyError, TypeError, ValueError): value = None# NOT SO GOODif &apos;x&apos; in d and \ isinstance(d[&apos;x&apos;], str) and \ d[&apos;x&apos;].isdigit(): value = int(d[&apos;x&apos;])else: value = None 枚举代码如下：1for i, item in enumerate(items): 当既需要遍历容器内的元素，又需要容器内元素的下标时，这个方法便派上用场了。 表达式来构建列表代码如下：1[i * 3 for i in data if i &gt; 10] 对于一些比较简单的变换，这种方法非常简洁。如果太复杂，还是使用常规的for+if的语句。我认为判断的依据在于该语句是否太长而影响可读性。 zip创建字典代码如下1d = dict(zip(keys, values)) 代码简洁，避免使用循环进行创建。 使用 _ 接收无用变量代码如下：1for k, _ in [(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)] 对于元组中的数值我们不需要，那么使用下划线来接收。如果是以下形式：1for k, j in [(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)] 难免阅读者会去考虑变量j的用途，影响可读性。 总结这些idioms很有帮助。 12345678910111213if __name__ == &apos;__main__&apos;:if x:if not x:# containerif item in items:# iterationfor item in items:a, b = b, afor k, _ in [(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)] 这些我现在已经深刻理解，成为我的python代码风格一部分， 12345678910&apos;&apos;.join(some_strings)try:except:d = dict(zip(keys, values))for i, item in enumerate(items):[i * 3 for i in data if i &gt; 10] 这些我还需要继续熟悉之中。 参考 http://safehammad.com/downloads/python-idioms-2014-01-16.pdf https://docs.python.org/3.1/howto/doanddont.html]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>python coding rule</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git学习笔记]]></title>
    <url>%2F2018%2F10%2F21%2Fgit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[git是版本控制工具，程序员必备技能。以前在学校的时候自己跟着教程学习过，现在在工作中已经用了一段时间了。在此进行总结和复习。 git的初始化操作我通过一系列的命令对操作进行复习和解释。 安装git后，需要指定用户名和邮箱 12$ git config --global user.name &quot;s********a&quot;$ git config --global user.email &quot;3**********.com&quot; git init会初始化一个本次仓库 123mkdir git_testcd git_testgit init git 提交文件 git add 添加文件 git commit 将文件提交至版本库 123touch readme.txtgit add readme.txtgit commit -m &quot;first commit&quot; git log 查看多次提交的版本文件 123456sssdembp:git_test sss$ git logcommit 81e27beccb5576f2e02f90ad2c373d8a7341268e (HEAD -&gt; master)Author: stshihia &lt;379187038@qq.com&gt;Date: Sun Oct 21 08:51:41 2018 +0800 first commit 回退版本在Git中，用HEAD表示当前版本,上一个版本就是HEAD^一般使用git log 查看版本的 commit id通过1git reset --hard 81e27beccb5576f2e02f90ad2c373d8a7341268e 来回退到某个版本 暂存区和工作区关于暂存区和工作区, 工作区就是我们能看见的目录。 第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。 有了暂存区，那么平时我们可以add多次，将多次改动累计到一次进行commit操作。因为git是管理修改，而不是管理文件的。 如果要删除某个文件123rm readme.txtgit rm readme.txtgit commit -m &quot;remove readme.txt&quot; 远程库的名字就是origin，这是Git默认的叫法HEAD严格来说不是指向提交，而是指向master 分支分支是版本库之下的一个概念，一个版本库可以有多个分支，修改的提交时基于当前的分支的，切换分支后，会看不见之前分支的修改12345git branch dev 创建分支git branch 查看分支git checkout dev 切换分支git merge dev 合并分支到当前分支git branch -d dev 合并分支会需要解决冲突，解决冲突就是编辑冲突的文件重新git add并commit提交。能够看出，基于文件的工作流是最为方便的，不会存在冲突，也不会在协作中出现相互覆盖。 分支管理策略 在实际开发中，我们应该按照几个基本原则进行分支管理：首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。 这种策略还是不好，如果不基于文件进行管理，会需要解决大量的冲突，在团队协作中增加许多工作量。在实际工作中，我们是通过git clone多个库文件，然后checkout 来实现不同分支的管理的。但是我们是测试团队，对代码的要求要低很多。 推送是基于分支的123git remote -v 查看远端库地址git pull 拉取远端的仓库git push origin master 推送本地至master分支 git clone 只会看见master分支，需要看见远端其他分支则需要本地创建, git push 也一样12$ git checkout -b dev origin/dev$ git push origin dev 标签tag标签就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动）切换到想打标签的分支，找到想打标签的commit12git tag v1.0 &lt;commit-id&gt;git tag 列出所有标签 有点麻烦的是标签不是按照时间排序的 搭建本地git 服务器通过树莓派，可以方便地进行实验安装git1sudo apt-get install git-core 创建git用户12sudo adduser gitpassword:g***i 此时在树莓派的pi用户路径下面新建一个git repo即可进行clone操作1234cd /home/pimkdir git_testcd git_testgit init 在本地进行clone1git clone git@192.168.1.6:/home/git/git_test 但是每次进行git clone需要输入密码 总结关于git这样的工具，重点在于使用。但是使用过一段时间之后的总结，才会让自己有所提升。 我自己工作中的一些感受: 解决冲突很麻烦，协作中，最好已基于文件的方式进行合作 稳定的master分支一定要保证 由于提交会很多，开发重要节点打tag很重要 常用的命令会总结，不常用的命令会查询 参考 https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>git learn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建我的Hexo博客]]></title>
    <url>%2F2018%2F10%2F11%2F%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[一直有计划搭建我自己的博客，使用了Hexo进行实现。后面在进行选择的时候，考虑了下面几种。 WordPress 这是一种PHP框架，适合快速建站，对编程的要求较低，适合帮别人搭建网站，但是不容易定制，PHP语言较老。 Django和flask Python的web框架，功能齐全，但是学习的时间较长 Hexo hexo很有极客范，网上教程很多，搭建简单，只能搭建静态博客，没有后台。 PHP语言我不感兴趣，Django和flask近期也没有时间学。Hexo搭建简单，能够让我专注在博客撰写的本身，而且不需要购买域名，果断选择Hexo。我是在树莓派上进行搭建Hexo的环境搭建的。本篇博客大概分为四个部分： 树莓派环境搭建 Hexo环境搭建 Hexo主题配置 部署至github 安装树莓派系统树莓派是一块小型的电脑主板，非常适合用于linux环境学习和开发。 a. 系统镜像下载地址! https://www.raspberrypi.org/downloads/raspbian b. 使用win32diskimager将系统烧写至内存卡 c. 在目录新建一个ssh的文件夹，允许进行ssh连接 Hexo基础环境配置将内存卡插入树莓派上电就是一个linux 环境 安装git 1sudo apt-get install git-core 安装nvm，安装完成后需要reboot设备12wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | shreboot 安装npm1nvm install stable 安装Hexo1npm install -g hexo-cli 至此 Hexo环境便搭好了，试用一下1234hexo init BlogTestcd BlogTesthexo ghexo s 此时在浏览器中输入树莓派IP加默认端口地址( http://192.168.1.4:4000 )，便能够访问生成的博客 博客主题配置Hexo有很多主题，Next是非常流行的一个 安装Next12cd your-hexo-sitegit clone https://github.com/iissnan/hexo-theme-next themes/next 各种配置其实都基本是修改这两个文件 主目录下的站点配置文件 /_config.yml文件 主题目录下的主题配置文件 /themes/next/_config.yml文件 下面介绍以下的配置 配置站点主题 修改站点配置文件 1theme: next 配置主题语言 修改站点配置文件 1language: zh-Hans 配置主题风格 修改主题配置文件 123#scheme: Muse#scheme: Mistscheme: Pisces 配置子页面 Next提供以下类别的页面 123456789menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 commonweal: 公益404 something: 有料 我选择启用 home, archives, tags, categories, about, search 这六种页面。 123hexo new page tagshexo new page abouthexo new page categories 页面内容还需要后续添加完善 配置主题搜索功能 添加本地自定义站点内容搜索(Local search) 首先安装 hexo-generator-searchdb，在站点的根目录下执行以下命令： 1npm install hexo-generator-searchdb --save 编辑站点配置文件，新增以下内容置： 12345search:path: search.xml field: post format: html limit: 10000 编辑主题配置文件，启用本地搜索功能： 123Local searchlocal_search:enable: true 还有其他的一些配置，可以访问官方文档进行查看 博客部署至GitHub 配置本地git的用户名和邮箱 12git config --global user.name “stshihia”git config --global user.email “379187038@qq.com” 查看配置是否成功 12git config user.namegit config user.email 生成本地rsa密钥用于与github网站相连接 123ssh-keygen -t rsa -C &apos;379187038@qq.com&apos;vim /home/pi/.ssh/id_rsa.pubssh -T git@github.com 可以查看其内容并贴到自己的github 密钥上, 通过ssh验证是否成功连接 修改站点配置文件1234deploy: type: git repo: git@github.com:stshihia/stshihia.github.io.git branch: master 输入12hexo generatehexo deploy Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io至此，访问博客地址 https://stshihia.github.io/ 即可 总结一些个人的经验总结： 熟悉了Hexo框架，前端的世界还挺好玩的。 bilibili上能找到不错的资源 先找博客了解大概，然后通过视频进行学习操作细节，再通过博客来查漏补缺，最后官方文档可以进行查询。 参考 https://www.cnblogs.com/fengxiongZz/p/7707219.html http://theme-next.iissnan.com/ https://www.bilibili.com/video/av17653359?from=search&amp;seid=11432917052424913522]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>hexo learn</tag>
      </tags>
  </entry>
</search>
